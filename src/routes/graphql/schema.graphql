schema {
  query: Query
  mutation: Mutation
}

type Query {
  profile(id: UUID!): Profile
  user(id: UUID!): User
  users: [User]
  posts: [Post]
  post(id: UUID!): Post
  memberTypes: [MemberType]
  memberType(id: MemberTypeId!): MemberType
  profiles: [Profile]
}

type Profile {
  id: UUID!
  isMale: Boolean!
  yearOfBirth: Int!
  userId: UUID!
  memberType: MemberType!
  user: User
}

scalar UUID

type MemberType {
  id: String!
  discount: Float
  postsLimitPerMonth: Int
}

type User {
  id: UUID!
  name: String!
  balance: Float!
  posts: [Post]
  profile: Profile
  userSubscribedTo: [User]
  subscribedToUser: [User]
}

type Post {
  id: UUID!
  title: String!
  content: String!
  authorId: UUID!
  author: User
}

enum MemberTypeId {
  BASIC
  BUSINESS
}

type Mutation {
  createUser(dto: CreateUserInput!): User
  createPost(dto: CreatePostInput!): Post
  createProfile(dto: CreateProfileInput!): Profile
  deleteUser(id: UUID!): Boolean
  deletePost(id: UUID!): Boolean
  deleteProfile(id: UUID!): Boolean
  changeUser(id: UUID!, dto: ChangeUserInput!): User
  changePost(id: UUID!, dto: ChangePostInput!): Post
  changeProfile(id: UUID!, dto: ChangeProfileInput!): Profile
  subscribeTo(userId: UUID!, authorId: UUID!): Boolean
  unsubscribeFrom(userId: UUID!, authorId: UUID!): Boolean
}

input CreateUserInput {
  name: String!
  balance: Float!
}

input CreatePostInput {
  title: String!
  content: String!
  authorId: UUID!
}

input CreateProfileInput {
  isMale: Boolean!
  yearOfBirth: Int!
  memberTypeId: MemberTypeId!
  userId: UUID!
}

input ChangeUserInput {
  name: String
  balance: Float
}

input ChangePostInput {
  title: String
  content: String
}

input ChangeProfileInput {
  isMale: Boolean
  yearOfBirth: Int
}